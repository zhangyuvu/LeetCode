package com.zy;

/**
 * @author zhangyu
 * @date 2021/10/9 21:38

    给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），
每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？
例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

    示例 1：

    输入: 2
    输出: 1
    解释: 2 = 1 + 1, 1 × 1 = 1

    示例 2:

    输入: 10
    输出: 36
    解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
    提示：

    2 <= n <= 58


 */
public class Solution {


    /*
        定义状态 dp[i] 为长度为 i 时的最大乘积
        边界dp[2] = 1
        状态转移方程 dp[i] =  max(dp[i-j] * j , j * (i - j))   2 < j <= i - 2
        dp[i] 的最大值结果存在两种情况 一种是直接利用 j 和 i - j 乘出来 第二种是利用 j 乘 dp[i - j]

        第一种情况举例： 当 i = 6 ， j = 3 时 ，存在 最大值 dp[6] = 3 * 3 = 9 其他所有情况的值都没有它大
        第二中情况举例： 当 i = 9 , j = 3 时，存在 最大值 dp[9] = 3 * dp[9 - 3] = 3 * 9 = 27 其他所有情况的值都没有它大
        所以在状态转移方程中 需要遍历所有小于 i 的所有数，取出上述两种情况中的最大值

    */



    public int cuttingRope(int n) {
        if(n == 2) return 1;
        int[] dp = new int[n + 1];  // 定义状态
        dp[2] = 1;  // 初始化值
        dp[3] = 2;

        for (int i = 4; i <= n ; i++) {
            for(int j = 2 ; j <= i - 2 ; j++){
                dp[i] = Math.max(dp[i], Math.max(dp[i-j] * j, (i - j) * j));
            }
        }
        return dp[n];
    }

}
